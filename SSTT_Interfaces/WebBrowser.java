/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package SSTT_Interfaces;

import static SSTT_Interfaces.WebBrowser.arg;
import com.google.gson.Gson;
import demo.sphinx.helloworld.HelloWorld;
import demo.sphinx.helloworld.SpeechToText;
import edu.cmu.sphinx.frontend.util.Microphone;
import edu.cmu.sphinx.recognizer.Recognizer;
import edu.cmu.sphinx.result.Result;
import edu.cmu.sphinx.util.props.ConfigurationManager;
import edu.cmu.sphinx.util.props.PropertyException;
import java.awt.Robot;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.Reader;
import java.net.URL;
import java.net.URLEncoder;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.text.Document;

/**
 *
 * @author TOSHIBA
 */
public class WebBrowser extends javax.swing.JFrame {

    /**
     * Creates new form WebBrowser
     */
    public WebBrowser() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        searchBar = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        searchResults = new javax.swing.JTextArea();
        resultProgress = new javax.swing.JProgressBar();
        searchToggle = new javax.swing.JToggleButton();
        clrBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("web search");

        searchBar.setFont(new java.awt.Font("Iskoola Pota", 0, 14)); // NOI18N
        searchBar.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                searchBarFocusGained(evt);
            }
        });
        searchBar.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                searchBarPropertyChange(evt);
            }
        });
        searchBar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                searchBarKeyPressed(evt);
            }
        });

        searchResults.setColumns(20);
        searchResults.setFont(new java.awt.Font("Iskoola Pota", 0, 14)); // NOI18N
        searchResults.setRows(5);
        jScrollPane1.setViewportView(searchResults);

        resultProgress.setMaximum(20);

        searchToggle.setText("Speech");
        searchToggle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchToggleActionPerformed(evt);
            }
        });

        clrBtn.setText("CLR");
        clrBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clrBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(resultProgress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(searchBar, javax.swing.GroupLayout.PREFERRED_SIZE, 639, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clrBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                        .addComponent(searchToggle)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchToggle)
                    .addComponent(clrBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 355, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(resultProgress, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void searchBarFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_searchBarFocusGained
        // TODO add your handling code here:
        
    }//GEN-LAST:event_searchBarFocusGained

    private void searchBarPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_searchBarPropertyChange
        // TODO add your handling code here:
        
    }//GEN-LAST:event_searchBarPropertyChange

    private void searchBarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchBarKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode()==10){
            searchResults.setText(null);
            for(int resultCount=0;resultCount<=16;resultCount+=4){
            try {
                String address = "http://ajax.googleapis.com/ajax/services/search/web?v=1.0&start="+resultCount+"&q=";
//		String query = "programcreek";
                String query = WebBrowser.searchBar.getText(); System.out.println(searchBar.getText());
		String charset = "UTF-8";
 
		URL url = new URL(address + URLEncoder.encode(query, charset));
		Reader reader = new InputStreamReader(url.openStream(), charset);
		GoogleResults results = new Gson().fromJson(reader, GoogleResults.class);
 
		int total = results.getResponseData().getResults().size();
		System.out.println("total: "+total);
                
		// Show title and URL of each results
		for(int i=0; i<=total-1; i++){
//			System.out.println("Title: " + results.getResponseData().getResults().get(i).getTitle());
//			System.out.println("URL: " + results.getResponseData().getResults().get(i).getUrl() + "\n");
                        searchResults.append("Title: "+results.getResponseData().getResults().get(i).getTitle()+"\n");
                        searchResults.append("URL: "+ results.getResponseData().getResults().get(i).getUrl()+"\n\n");
//                        Document HTMLdoc =jEditorPane1.getDocument();
//                        HTMLdoc.insertString(i, results.getResponseData().getResults().get(i).getUrl()+"\n\n", null);
		}
                resultProgress.setValue(resultProgress.getValue()+total);
            } catch (Exception e) {
//                JOptionPane.showMessageDialog(rootPane, e);
                e.printStackTrace();
            }
        }
        }
    }//GEN-LAST:event_searchBarKeyPressed

    private void searchToggleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchToggleActionPerformed
        // TODO add your handling code here:
        Thread vSearch=new Thread(new VoiceSearch());
        if(searchToggle.isSelected()){
            searchToggle.setText("Voice");
              
              vSearch.start();
            
        }else{
           
            searchToggle.setText("Text");
            
            vSearch=null;
        }
        
       
    }//GEN-LAST:event_searchToggleActionPerformed

    private void clrBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clrBtnActionPerformed
        // TODO add your handling code here:
        searchBar.setText(null);
    }//GEN-LAST:event_clrBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    static String arg[];
    static WebBrowser Wb;
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(WebBrowser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(WebBrowser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(WebBrowser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(WebBrowser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        arg=args;
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
               Wb= new WebBrowser();
                Wb.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clrBtn;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JProgressBar resultProgress;
    public static javax.swing.JTextField searchBar;
    private javax.swing.JTextArea searchResults;
    private javax.swing.JToggleButton searchToggle;
    // End of variables declaration//GEN-END:variables
}


class VoiceSearch implements Runnable{
    public void run(){
         /////////////////////////////////////////////////////////////////////////
                    try {
            URL url;
            if (arg.length > 0) {
                url = new File(arg[0]).toURI().toURL();
            } else {
                url = HelloWorld.class.getResource("helloworld.config.xml");
            }

            System.out.println("Loading...");

            ConfigurationManager cm = new ConfigurationManager(url);

	    Recognizer recognizer = (Recognizer) cm.lookup("recognizer");
	    Microphone microphone = (Microphone) cm.lookup("microphone");
            
            
            /* allocate the resource necessary for the recognizer */
            recognizer.allocate();
            
            /* the microphone will keep recording until the program exits */
	    if (microphone.startRecording()) {
                
		System.out.println
		    ("Say: Hello");
                                        
		while (true) {
		    System.out.println
			("Start speaking. Press Ctrl-C to quit.\n");
                                        
                    /*
                     * This method will return when the end of speech
                     * is reached. Note that the endpointer will determine
                     * the end of speech.
                     */ 
		    Result result = recognizer.recognize();
		    
		    if (result != null) {
			String resultText = result.getBestFinalResultNoFiller();
                                                            
			//System.out.println("You said: " + resultText + "\n");
                        System.out.println("Success");
//                        stt.speechText.setText(resultText);
                        if(resultText.equals("පරික්ෂාකරන්න")){
                           // JOptionPane.showMessageDialog(null,  "Searching ...");
                            WebBrowser.searchBar.requestFocus();
                            Robot enterPress=new Robot();
                            enterPress.keyPress(10);
                            continue;
                        }
                        WebBrowser.searchBar.setText(WebBrowser.searchBar.getText()+" "+resultText);
                        //stt.speechText.setText(stt.speechText.getText()+resultText);
                        /////////////////////////////////////////
                        /*if(resultText.equalsIgnoreCase("open command")){
                            try {
                                Process p=Runtime.getRuntime().exec("cmd /c start cmd");
                            } catch (Exception e) {
                            }
                        }
                        if(resultText.equalsIgnoreCase("close command")){
                            try {
                                Process p=Runtime.getRuntime().exec("cmd /c start taskkill /im cmd.exe /f");
                            } catch (Exception e) {
                            }
                        }
                        if(resultText.equalsIgnoreCase("open calculator")){
                            try {
                                Process p=Runtime.getRuntime().exec("cmd /c start calc.exe");
                            } catch (Exception e) {
                            }
                        }
                        if(resultText.equalsIgnoreCase("close calculator")){
                            try {
                                Process p=Runtime.getRuntime().exec("cmd /c start taskkill /im calc.exe /f");
                            } catch (Exception e) {
                            }
                        }*/
                        /////////////////////////////////////////
		    } else {
			System.out.println("I can't hear what you said.\n");
		    }
		}
	    } else {
		System.out.println("Cannot start microphone.");
		recognizer.deallocate();
		System.exit(1);
	    }
        } catch (IOException e) {
            System.err.println("Problem when loading HelloWorld: " + e);
            e.printStackTrace();
        } catch (PropertyException e) {
            System.err.println("Problem configuring HelloWorld: " + e);
            e.printStackTrace();
        } catch (InstantiationException e) {
            System.err.println("Problem creating HelloWorld: " + e);
            e.printStackTrace();
        } catch(Exception e){
            e.printStackTrace();
        }
                    ////////////////////////////////////////////////////////////////////////
    }
}